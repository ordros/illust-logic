{"version":3,"sources":["utils/createStringFromHint.js","utils/getHintsFromString.js","reducers/pixelTableReducer.js","utils/createHintsFromBoard.js","components/Pixel/index.jsx","components/Table/index.jsx","components/PixelTable/index.jsx","components/EditQuestionPage/index.jsx","components/SolveQuestionPage/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["createStringFromHint","hint","buf","Buffer","from","JSON","stringify","zlib","deflateRawSync","toString","getHintFromString","strHint","deflated","inflateRawSync","parse","getHintsFromString","str","arr","split","sizeX","parseInt","sizeY","hintsX","hintsY","initialState","size","table","hints","x","y","mode","pixelTableReducer","state","action","type","payload","Array","length","map","v","position","cellState","newTable","xHints","yHints","concat","Math","ceil","createHintFromLine","line","cnt","push","c","forEach","index","pop","createHintsFromBoard","yLines","_","Wrapper","styled","div","BlackCell","WhiteCell","CheckedCell","Pixel","status","onClickPixel","dispatch","useDispatch","onClick","onMouseEnter","e","buttons","getCell","Cell","StyledTable","FrameBorder","Index","th","Spacer","Table","getIndexArray","s","array","xHintMaxLength","reduce","a","b","max","yHintMaxLength","maxHintsLength","useSelector","cellSpacing","yHintX","as","yHinty","xHintx","PixelTable","EditQuestionPage","useState","questionUrl","setQuestionUrl","setInitalData","useEffect","xStringHint","yStringHint","hintString","createStringHints","onChange","isNaN","numSize","setTableSize","target","value","href","Message","p","SolveQuestionPage","location","useLocation","solved","setSolved","deepEqual","arr1","arr2","i","j","search","replace","current","App","store","createStore","className","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ffe9664f.chunk.js","sourcesContent":["import zlib from 'zlib';\r\n\r\n// めんどくさいので1つのヒントの最大値は16までとして簡易実装する\r\nconst createStringFromHint = (hint) => {\r\n  const buf = Buffer.from(JSON.stringify(hint));\r\n  const deflated = zlib.deflateRawSync(buf);\r\n  const base64string = deflated.toString('base64');\r\n  return base64string;\r\n};\r\n\r\nexport default createStringFromHint;\r\n","import zlib from 'zlib';\r\n\r\nconst getHintFromString = (strHint) => {\r\n  const deflated = Buffer.from(strHint, 'base64');\r\n  const hint = zlib.inflateRawSync(deflated).toString();\r\n  return JSON.parse(hint);\r\n}\r\n\r\nconst getHintsFromString = (str) => {\r\n  const arr = str.split('/');\r\n  const sizeX = parseInt(arr[0]);\r\n  const sizeY = parseInt(arr[1]);\r\n  const hintsX = getHintFromString(arr[2]);\r\n  const hintsY = getHintFromString(arr[3]);\r\n  \r\n  return {\r\n    sizeX,\r\n    sizeY,\r\n    hintsX,\r\n    hintsY,\r\n  };\r\n};\r\n\r\nexport default getHintsFromString;","const initialState = {\r\n  size: null,\r\n  table: null,\r\n  hints: { x: null, y: null },\r\n  mode: 'create',\r\n};\r\n\r\nconst pixelTableReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'INIT': {\r\n      const { size: { x, y } } = action.payload;\r\n      return {\r\n        size: { x, y },\r\n        table: Array.from({length: x}).map((v) => Array.from({length: y}).map(() => 'white')),\r\n        // mode: 'create',\r\n      };\r\n    }\r\n    case 'SET_PIXEL': {\r\n      const { position: { x, y }, cellState } = action.payload;\r\n      const newTable = state.table;\r\n      newTable[x][y] = cellState;\r\n      return { ...state, table: newTable };\r\n    }\r\n    case 'SET_HINTS': {\r\n      const { xHints, yHints } = action.payload;\r\n      return {\r\n        ...state,\r\n        hints: {\r\n          x: xHints.map((hint) => (hint || []).concat(Array.from({length: Math.ceil(state.size.y / 2) - (hint ? hint.length : 0) }))),\r\n          y: yHints.map((hint) => (hint || []).concat(Array.from({length: Math.ceil(state.size.x / 2) - (hint ? hint.length : 0) }))),\r\n        },\r\n      };\r\n    }\r\n    case 'SET_MODE': {\r\n      const { mode } = action.payload;\r\n      return {\r\n        ...state,\r\n        mode,\r\n      }\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default pixelTableReducer;","const createHintFromLine = (line) => {\r\n  const hints = [];\r\n  // const binaryline = \r\n  let cnt = 0;\r\n  line.push(\"padding\");\r\n  line.map((c) => c === 'black' ? \"1\" : \"0\").forEach((c, index) => {\r\n    if (c === \"1\") {\r\n      cnt++;\r\n    } else {\r\n      if (cnt > 0) {\r\n        hints.push(cnt);  \r\n        cnt = 0;\r\n      }\r\n    }\r\n  });\r\n  line.pop();\r\n  return hints.concat(Array.from({length: (line.length/2) - hints.length}));\r\n};\r\n\r\nconst createHintsFromBoard = (table) => {\r\n  if (!table) {\r\n    return { xHints: null, yHints: null };\r\n  }\r\n\r\n  const yLines = []; \r\n  for (let y = 0; y < table[0].length; y++) {\r\n    const line = Array.from({length: table.length}).map((_, index) => index)\r\n      .map((x) => table[x][y])\r\n    yLines.push(line);\r\n  }\r\n  return {\r\n    xHints: table.map((line) => createHintFromLine(line)),\r\n    yHints: yLines.map((line) => createHintFromLine(line)),\r\n  };\r\n};\r\n\r\nexport default createHintsFromBoard;\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport styled from 'styled-components';\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 100%;\r\n  height: 100%;\r\n  border: 1px solid black;\r\n`;\r\n\r\nconst BlackCell = styled.div`\r\n  background: black;\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\n\r\nconst WhiteCell = styled.div`\r\n  background: white;\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\n\r\nconst CheckedCell = styled.div`\r\n  background: white;\r\n  background-image: linear-gradient(-45deg,\r\n    transparent 48%,\r\n    black 48%,\r\n    black 52%,\r\n    transparent 52%, \r\n    transparent),\r\n  linear-gradient(45deg, /*角度*/\r\n    transparent 48%,\r\n    black 48%, /*斜線の色*/\r\n    black 52%, /*斜線の色*/\r\n    transparent 52%, \r\n    transparent);\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\n\r\nconst Pixel = ({ status, x, y, mode, onClickPixel }) => {\r\n  const dispatch = useDispatch();\r\n  const onClick = () => {\r\n    let cellState = '';\r\n    switch(status) {\r\n      case 'white':\r\n        cellState = 'black';\r\n        break;\r\n      case 'black':\r\n        if (mode === 'solve') {\r\n          cellState = 'checked';\r\n        } else {\r\n          cellState = 'white';\r\n        }\r\n        break;\r\n      case 'checked':\r\n      default:\r\n        cellState = 'white';\r\n    }\r\n    dispatch({ type: \"SET_PIXEL\", payload: { position:{ x, y }, cellState } });\r\n    \r\n    onClickPixel();\r\n  };\r\n  const onMouseHover = (e) => {\r\n    // hover時に左クリックしていないなら何もしない\r\n    if (e.buttons !== 1 ) {\r\n      return;\r\n    }\r\n    dispatch({ type: \"SET_PIXEL\", payload: { position:{ x, y }, cellState: 'black'} });\r\n    \r\n    onClickPixel();\r\n    return;\r\n  };\r\n\r\n  const getCell = (status) => {\r\n    switch(status) {\r\n      case 'white':\r\n        return <WhiteCell />;\r\n      case 'black':\r\n        return <BlackCell />;\r\n      case 'checked':\r\n      default:\r\n        return <CheckedCell />;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Wrapper onClick={onClick} onMouseEnter={onMouseHover}>\r\n      {getCell(status)}\r\n    </Wrapper>\r\n  );\r\n  \r\n};\r\n\r\nexport default Pixel;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport styled, { css } from 'styled-components';\r\nimport createHintsFromBoard from '../../utils/createHintsFromBoard';\r\nimport Pixel from '../Pixel';\r\n\r\nconst Cell = styled.div`\r\n  width: 40px;\r\n  height: 40px;\r\n  border-collapse: collapse;\r\n  font-size: 20px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background: #999;\r\n`;\r\n\r\nconst StyledTable = styled.table`\r\n  width: 50px;\r\n  height: 50px;\r\n  \r\n  // border: 1px solid black;\r\n  border-spacing: 0;\r\n  border-collapse: collapse;\r\n  td {\r\n   padding: 0;\r\n   margin: 0;\r\n  }\r\n`;\r\n\r\nconst FrameBorder = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  border: 1px solid black;\r\n  border-collapse: collapse;\r\n`;\r\n\r\nconst Index = styled.th`\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n`;\r\n\r\nconst Spacer = styled.div`\r\n  width: 20px;\r\n  height: 20px;\r\n`;\r\n\r\nconst Table = ({size, table, xHints, yHints, onClickPixel}) => {\r\n  const getIndexArray = (s) => s ? Array.from({length: s}, (_, index) => index) : [];\r\n  const array = getIndexArray(size);\r\n  \r\n  const xHintMaxLength = xHints && xHints.reduce((a,b) => Math.max(a.length || a, b.length || b));\r\n  const yHintMaxLength = yHints && yHints.reduce((a,b) => Math.max(a.length || a, b.length || b));\r\n  const maxHintsLength = Math.max(xHintMaxLength, yHintMaxLength);\r\n\r\n  const { mode } = useSelector((state) => state);\r\n  return (\r\n    <StyledTable cellSpacing='0'>\r\n      <thead>\r\n        <tr>\r\n          <Index><Spacer/></Index>\r\n          {getIndexArray(xHintMaxLength).map((v) => <th key={v}></th>)}\r\n          {array.map((v) => <Index key={v}>{v}</Index>)}\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n       {\r\n          getIndexArray(maxHintsLength).map((yHintX) => {\r\n            return (\r\n              <tr key={yHintX}>\r\n                <Index as=\"td\" />\r\n                {getIndexArray(xHintMaxLength).map((v) => <td key={v}>{<Cell><FrameBorder/></Cell> }</td>)}\r\n                {getIndexArray(size).map((yHinty) => <td key={yHinty}><Cell><FrameBorder>{yHints[yHinty][yHintX] || ''}</FrameBorder></Cell></td>)}\r\n              </tr>\r\n            );\r\n          })\r\n        }\r\n        {array.map((x) => {\r\n          return (\r\n            <tr key={x}>\r\n              <Index as=\"td\" key={x}>{x}</Index>\r\n              {\r\n                getIndexArray(xHintMaxLength).map((xHintx) => {\r\n                  return (\r\n                    <td key={xHintx}>\r\n                      <Cell><FrameBorder>{xHints[x][xHintx] || ''}</FrameBorder></Cell>\r\n                    </td>\r\n                  );\r\n                })\r\n              }\r\n              {array.map((y) => {\r\n                return (\r\n                  <td key={y}>\r\n                    <Cell>\r\n                      <Pixel x={x} y={y} status={table && table[x][y]} onClickPixel={onClickPixel} mode={mode}/>\r\n                    </Cell>\r\n                  </td>\r\n                );\r\n              })}\r\n            </tr>\r\n          )\r\n        })}\r\n      </tbody>\r\n    </StyledTable>\r\n  )\r\n};\r\n\r\nexport default Table;","import { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport createHintsFromBoard from \"../../utils/createHintsFromBoard\";\r\nimport createStringFromHint from \"../../utils/createStringFromHint\";\r\nimport getHintsFromString from \"../../utils/getHintsFromString\";\r\nimport Table from \"../Table\";\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  padding: 40px;\r\n`;\r\n\r\nconst PixelTable = ({ size, table, hints, onClickPixel }) => {\r\n  return (\r\n    <Wrapper>\r\n      {table && hints && (\r\n        <>\r\n          <Table size={size.x} table={table} xHints={hints.x} yHints={hints.y} onClickPixel={onClickPixel}/>\r\n        </>\r\n      )}\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default PixelTable;\r\n","import { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport createHintsFromBoard from \"../../utils/createHintsFromBoard\";\r\nimport createStringFromHint from \"../../utils/createStringFromHint\";\r\nimport PixelTable from \"../PixelTable\";\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst EditQuestionPage = () => {\r\n  const { size, table, hints } = useSelector((state) => state);\r\n  const dispatch = useDispatch();\r\n\r\n  const [questionUrl, setQuestionUrl] = useState('');\r\n\r\n  const setInitalData = () => {\r\n    const initSize = 10;\r\n    dispatch({ type: \"INIT\", payload: { size: { x: initSize, y: initSize }}});\r\n    dispatch({ type: 'SET_HINTS', payload: { xHints: Array.from({length: initSize}), yHints: Array.from({length: initSize}) } });\r\n    dispatch({ type: 'SET_MODE', payload: { mode: 'create' }});\r\n  }\r\n\r\n  const createStringHints = () => {\r\n    const xStringHint = createStringFromHint(hints.x);\r\n    const yStringHint = createStringFromHint(hints.y);\r\n    const hintString = `${size.x}/${size.y}/${xStringHint}/${yStringHint}`;\r\n\r\n    setQuestionUrl(`/solve?hint=${hintString}`);\r\n  };\r\n\r\n  const setTableSize = (size) => {\r\n    if (!isNaN(size)) {\r\n      const numSize = parseInt(size);\r\n      if (numSize > 0 && numSize <= 20) {\r\n        dispatch({ type: 'INIT', payload: { size: { x: numSize, y: numSize }}});\r\n        dispatch({ type: 'SET_HINTS', payload: { xHints: Array.from({length: numSize}), yHints: Array.from({length: numSize}) } }); \r\n      }\r\n    }\r\n  };\r\n  \r\n  const createHints = () => {\r\n    const { xHints, yHints } = createHintsFromBoard(table);\r\n    dispatch({ type: 'SET_HINTS', payload: { xHints, yHints } })\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!table) {\r\n      setInitalData();\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (hints && hints.x && hints.y) {\r\n      createStringHints();\r\n    }\r\n  }, [hints]);\r\n\r\n  return (\r\n    <Wrapper>\r\n      <PixelTable size={size} table={table} hints={hints} onClickPixel={createHints}/>\r\n      <>\r\n        table size(max size is 20): <input type=\"text\" onChange={(e) => setTableSize(e.target.value)} max={30}/>\r\n      </>\r\n      Let's solve: <a href={questionUrl} target=\"_blank\">{questionUrl && 'here'}</a>\r\n      <button onClick={setInitalData}>Reset!</button>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default EditQuestionPage;","import { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useLocation } from \"react-router\";\r\nimport styled from \"styled-components\";\r\nimport createHintsFromBoard from \"../../utils/createHintsFromBoard\";\r\nimport createStringFromHint from \"../../utils/createStringFromHint\";\r\nimport getHintsFromString from \"../../utils/getHintsFromString\";\r\nimport PixelTable from \"../PixelTable\";\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst Message = styled.p`\r\n  font-size: 40px;\r\n  font-weight: bold;\r\n  color: red;\r\n`;\r\n\r\nconst SolveQuestionPage = () => {\r\n  const { size, table, hints } = useSelector((state) => state);\r\n  const dispatch = useDispatch();\r\n  const location = useLocation();\r\n\r\n  const [solved, setSolved] = useState(false);\r\n\r\n  const setInitalData = () => {\r\n    const initSize = 10;\r\n    dispatch({ type: 'SET_MODE', payload: { mode: 'solve' }});\r\n    if (!location.search) {\r\n      dispatch({ type: \"INIT\", payload: { size: { x: initSize, y: initSize }}});\r\n      dispatch({ type: 'SET_HINTS', payload: { xHints: Array.from({length: initSize}), yHints: Array.from({length: initSize}) } });\r\n      return;\r\n    }\r\n    const hint = location.search.replace('?hint=', '');\r\n    const {\r\n      sizeX,\r\n      sizeY,\r\n      hintsX,\r\n      hintsY,\r\n    } = getHintsFromString(hint);\r\n\r\n    dispatch({ type: \"INIT\", payload: { size: { x: sizeX, y: sizeY }}});\r\n    dispatch({ type: 'SET_HINTS', payload: { xHints: hintsX, yHints: hintsY } });\r\n  }\r\n\r\n  const deepEqual = (arr1, arr2) => {\r\n    for (let i = 0; i < arr1.length; i++) {\r\n      for (let j = 0; j < arr1[0].length; j++) {\r\n        if (arr1[i][j] != arr2[i][j]) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n \r\n  const checkSolved = () => {\r\n    const current = createHintsFromBoard(table);\r\n    \r\n    if(deepEqual(current.xHints, hints.x) && deepEqual(current.yHints, hints.y)) {\r\n      setSolved(true);\r\n    } else {\r\n      setSolved(false);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!table) {\r\n      setInitalData();\r\n    }\r\n  });\r\n\r\n  return (\r\n    <Wrapper>\r\n      <PixelTable size={size} table={table} hints={hints} onClickPixel={checkSolved}/>\r\n      <Message>{solved && 'Solved!'}</Message>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default SolveQuestionPage;","import './App.css';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux'\nimport pixelTableReducer from './reducers/pixelTableReducer';\nimport PixelTable from './components/PixelTable';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport EditQuestionPage from './components/EditQuestionPage';\nimport SolveQuestionPage from './components/SolveQuestionPage';\n\nfunction App() {\n  const store = createStore(pixelTableReducer);\n\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <BrowserRouter>\n          <Route path=\"/create\" component={EditQuestionPage} />\n          <Route path=\"/solve\" component={SolveQuestionPage} />\n        </BrowserRouter>\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}